import java.util.*;
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
        // Write your code here
        int right[]=new int[n];
        int left[]=new int[n];
        Stack<Integer> st=new Stack<>();
        for(int i=n-1;i>=0;i--)
        {
            while(!st.isEmpty()&&a[st.peek()]>=a[i])
                st.pop();
            if(st.isEmpty())
                right[i]=n;
            else{
                right[i]=st.peek();
            }
            st.push(i);
        }
        st.clear();
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty()&&a[st.peek()]>=a[i])
                st.pop();
            if(st.isEmpty())
                left[i]=-1;
            else left[i]=st.peek();
            st.push(i);
        }
        int ans[]=new int[n];
        for(int i=0;i<n;i++)
        ans[i]=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            int ind=right[i]-left[i]-1;
            ans[ind-1]=Math.max(ans[ind-1],a[i]);
        }
        for(int i=n-2;i>=0;i--)
            ans[i]=Math.max(ans[i],ans[i+1]);
        return ans;
        
    }
}

