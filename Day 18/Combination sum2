import java.util.*;

public class Solution 
{
    static void fun(int ind, ArrayList<Integer> arr, int target, ArrayList < ArrayList < Integer >> ans, ArrayList < Integer > ds) {
        if (target == 0) {
            ans.add(new ArrayList < > (ds));
            return;
        }

        for (int i = ind; i < arr.size(); i++) {
            if (i > ind && arr.get(i) == arr.get(i-1)) continue;  ///ignoring duplicate elements
            if (arr.get(i)> target) break;  ///sum has crossed 

            ds.add(arr.get(i));
            fun(i + 1, arr, target - arr.get(i), ans, ds);
            ds.remove(ds.size() - 1);
        }
    }
    public static ArrayList<ArrayList<Integer>> combinationSum2(ArrayList<Integer> arr, int n, int target)
    {
        //    Write your code here.
        Collections.sort(arr);
        ArrayList<ArrayList<Integer>> ans=new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> tar=new ArrayList<Integer>();
        fun(0,arr,target,ans,tar);
        return ans;
    }
}


//Same as subset 2 problem here we first sort the array and try to construct the array according to number of element by seeing the duplicates
