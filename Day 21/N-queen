import java.util.*;
public class Solution {
    public static boolean canplace(int a[][],int i,int j,int n)
    {
        for(int col=0;col<j;col++)
            if(a[i][col]==1)
                return false;
        for(int row=0;row<i;row++)
            if(a[row][j]==1)
                return false;
        for(int row=i,col=j;row>=0&&col>=0;row--,col--)
            if(a[row][col]==1)
                return false;
        for(int row=i,col=j;row>=0&&col<n;row--,col++)
            if(a[row][col]==1)
                return false;
        return true;
    }
    public static boolean nqueen(int ind,int n,int a[][],ArrayList<ArrayList<Integer>> rans)
    {
        if(ind>=n)
            return true;
        for(int i=0;i<n;i++)
        {
            if(canplace(a,ind,i,n))
            {
                a[ind][i]=1;
                boolean poss=nqueen(ind+1,n,a,rans);
                if(poss)
                {
                    ArrayList<Integer> ta=new ArrayList<>();
                    for(int row=0;row<n;row++)
                    {
                        for(int col=0;col<n;col++)
                        {
                            ta.add(a[row][col]);
                        }
                    }
                    rans.add(ta);
                }
                a[ind][i]=0;
            }
        }
        return false;
    }
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> rans=new ArrayList<>();
        int a[][]=new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
                a[i][j]=0;
        }
        nqueen(0,n,a,rans);
        return rans;
    }
}
