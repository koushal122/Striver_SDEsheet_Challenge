import java.util.*;
public class Solution {

	public static int minTimeToRot(int[][] grid, int n, int m) {
		// Write your code here.
        if(grid==null||grid.length==0)
            return 0;
        Queue<int[]> rotten=new LinkedList<>();
        int rcnt=0,days=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]==2)
                    rotten.offer(new int[]{i,j});
                if(grid[i][j]!=0)
                    rcnt++;
            }
        }
        int total=grid.length*grid[0].length;
        if(rotten.size()==rcnt)
            return 0;
        int cnt=0;
        int dx[]={0,0,-1,1};
        int dy[]={-1,1,0,0};
        while(!rotten.isEmpty())
        {
           int k=rotten.size();
            cnt+=k;
            for(int i=0;i<k;i++)
            {
                int []point=rotten.poll();
                int row=point[0],col=point[1];
                for(int j=0;j<4;j++)
                {
                    int nrow=row+dx[j],ncol=col+dy[j];
                    if(nrow>=0&&nrow<grid.length&&ncol>=0&&ncol<grid[0].length&&grid[nrow][ncol]==1){
                        rotten.offer(new int[]{nrow,ncol});
                        grid[nrow][ncol]=2;
                    }
                }
            }
            if(!rotten.isEmpty())
                days++;
           
        }
        return cnt==rcnt?days:-1;
	}

}
